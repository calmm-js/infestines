(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.I = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.pipe2U = pipe2U;
exports.seq = seq;
exports.seqPartial = seqPartial;
exports.whereEqU = whereEqU;
exports.hasKeysOfU = hasKeysOfU;
exports.acyclicEqualsU = acyclicEqualsU;
exports.unzipObjIntoU = unzipObjIntoU;
exports.keys = keys;
exports.values = values;
exports.assocPartialU = assocPartialU;
exports.dissocPartialU = dissocPartialU;
exports.inherit = inherit;
var ary1of2 = function ary1of2(fn) {
  return function (x0, x1) {
    switch (arguments.length) {
      case 0:
      case 1:
        return fn(x0);
      default:
        return fn(x0)(x1);
    }
  };
};

var ary2of2 = function ary2of2(fn) {
  return function (x0, x1) {
    switch (arguments.length) {
      case 0:
      case 1:
        return function (x1) {
          return fn(x0, x1);
        };
      default:
        return fn(x0, x1);
    }
  };
};

var ary1of3 = function ary1of3(fn) {
  return function (x0, x1, x2) {
    switch (arguments.length) {
      case 0:
      case 1:
        return curryN(2, fn(x0));
      case 2:
        return curryN(2, fn(x0))(x1);
      default:
        return curryN(2, fn(x0))(x1, x2);
    }
  };
};

var ary2of3 = function ary2of3(fn) {
  return function (x0, x1, x2) {
    switch (arguments.length) {
      case 0:
      case 1:
        return ary1of2(function (x1) {
          return fn(x0, x1);
        });
      case 2:
        return fn(x0, x1);
      default:
        return fn(x0, x1)(x2);
    }
  };
};

var ary3of3 = function ary3of3(fn) {
  return function (x0, x1, x2) {
    switch (arguments.length) {
      case 0:
      case 1:
        return ary2of2(function (x1, x2) {
          return fn(x0, x1, x2);
        });
      case 2:
        return function (x2) {
          return fn(x0, x1, x2);
        };
      default:
        return fn(x0, x1, x2);
    }
  };
};

var ary1of4 = function ary1of4(fn) {
  return function (x0, x1, x2, x3) {
    switch (arguments.length) {
      case 0:
      case 1:
        return curryN(3, fn(x0));
      case 2:
        return curryN(3, fn(x0))(x1);
      case 3:
        return curryN(3, fn(x0))(x1, x2);
      default:
        return curryN(3, fn(x0))(x1, x2, x3);
    }
  };
};

var ary2of4 = function ary2of4(fn) {
  return function (x0, x1, x2, x3) {
    switch (arguments.length) {
      case 0:
      case 1:
        return ary1of3(function (x1) {
          return fn(x0, x1);
        });
      case 2:
        return curryN(2, fn(x0, x1));
      case 3:
        return curryN(2, fn(x0, x1))(x2);
      default:
        return curryN(2, fn(x0, x1))(x2, x3);
    }
  };
};

var ary3of4 = function ary3of4(fn) {
  return function (x0, x1, x2, x3) {
    switch (arguments.length) {
      case 0:
      case 1:
        return ary2of3(function (x1, x2) {
          return fn(x0, x1, x2);
        });
      case 2:
        return ary1of2(function (x2) {
          return fn(x0, x1, x2);
        });
      case 3:
        return fn(x0, x1, x2);
      default:
        return fn(x0, x1, x2)(x3);
    }
  };
};

var ary4of4 = function ary4of4(fn) {
  return function (x0, x1, x2, x3) {
    switch (arguments.length) {
      case 0:
      case 1:
        return ary3of3(function (x1, x2, x3) {
          return fn(x0, x1, x2, x3);
        });
      case 2:
        return ary2of2(function (x2, x3) {
          return fn(x0, x1, x2, x3);
        });
      case 3:
        return function (x3) {
          return fn(x0, x1, x2, x3);
        };
      default:
        return fn(x0, x1, x2, x3);
    }
  };
};

var ary0of0 = function ary0of0(fn) {
  return fn.length === 0 ? fn : function () {
    return fn();
  };
};
var ary1of1 = function ary1of1(fn) {
  return fn.length === 1 ? fn : function (x) {
    return fn(x);
  };
};

var C = [[ary0of0], [ary1of1, ary1of1], [void 0, ary1of2, ary2of2], [void 0, ary1of3, ary2of3, ary3of3], [void 0, ary1of4, ary2of4, ary3of4, ary4of4]];

var curryN = exports.curryN = function curryN(n, f) {
  return C[n][Math.min(n, f.length)](f);
};
var arityN = exports.arityN = function arityN(n, f) {
  return C[n][n](f);
};
var curry = exports.curry = function curry(f) {
  return arityN(f.length, f);
};

//

var id = exports.id = function id(x) {
  return x;
};
var always = exports.always = function always(x) {
  return function (_) {
    return x;
  };
};
var applyU = exports.applyU = function applyU(x2y, x) {
  return x2y(x);
};
var sndU = exports.sndU = function sndU(_, y) {
  return y;
};

//

var array0 = exports.array0 = Object.freeze([]);
var object0 = exports.object0 = Object.freeze({});

//

var isDefined = exports.isDefined = function isDefined(x) {
  return x !== undefined;
};

//

// The idea here is that any valid JSON object will be categorized correctly.
// Cases where there is no explicit attempt to create Array/Object lookalikes
// will also categorize correctly.

var isArray = exports.isArray = function isArray(x) {
  return x ? x.constructor === Array : false;
};

function hasObjectConstructor(x) {
  var c = x.constructor;
  return c === Object || typeof c !== "function" && Object.getPrototypeOf(x).constructor === Object;
}

var isObject = exports.isObject = function isObject(x) {
  return x ? hasObjectConstructor(x) : false;
};

//

function pipe2U(fn1, fn2) {
  var n = fn1.length;
  return n === 1 ? function (x) {
    return fn2(fn1(x));
  } : arityN(n, function () {
    return fn2(fn1.apply(undefined, arguments));
  });
}

var compose2U = exports.compose2U = function compose2U(fn1, fn2) {
  return pipe2U(fn2, fn1);
};

//

function seq(x) {
  for (var _len = arguments.length, fns = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    fns[_key - 1] = arguments[_key];
  }

  for (var i = 0, n = fns.length; i < n; ++i) {
    x = fns[i](x);
  }return x;
}

function seqPartial(x) {
  for (var _len2 = arguments.length, fns = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
    fns[_key2 - 1] = arguments[_key2];
  }

  for (var i = 0, n = fns.length; isDefined(x) && i < n; ++i) {
    x = fns[i](x);
  }return x;
}

//

var identicalU = exports.identicalU = function identicalU(a, b) {
  return a === b && (a !== 0 || 1 / a === 1 / b) || a !== a && b !== b;
};

//

function whereEqU(t, o) {
  for (var k in t) {
    var bk = o[k];
    if (!isDefined(bk) && !(k in o) || !acyclicEqualsU(t[k], bk)) return false;
  }
  return true;
}

//

function hasKeysOfU(t, o) {
  for (var k in t) {
    if (!(k in o)) return false;
  }return true;
}

//

var acyclicEqualsObject = exports.acyclicEqualsObject = function acyclicEqualsObject(a, b) {
  return whereEqU(a, b) && hasKeysOfU(b, a);
};

function acyclicEqualsArray(a, b) {
  var n = a.length;
  if (n !== b.length) return false;
  for (var i = 0; i < n; ++i) {
    if (!acyclicEqualsU(a[i], b[i])) return false;
  }return true;
}

function acyclicEqualsU(a, b) {
  if (identicalU(a, b)) return true;
  if (!a || !b) return false;
  var c = a.constructor;
  if (c !== b.constructor) return false;
  switch (c) {
    case Array:
      return acyclicEqualsArray(a, b);
    case Object:
      return acyclicEqualsObject(a, b);
    default:
      if (typeof a.equals === "function") return a.equals(b);
      return false;
  }
}

//

function unzipObjIntoU(o, ks, vs) {
  for (var k in o) {
    if (ks) ks.push(k);
    if (vs) vs.push(o[k]);
  }
}

function keys(o) {
  if (o instanceof Object) {
    if (hasObjectConstructor(o)) {
      var ks = [];
      unzipObjIntoU(o, ks, 0);
      return ks;
    } else {
      return Object.keys(o);
    }
  }
}

function values(o) {
  if (o instanceof Object) {
    if (hasObjectConstructor(o)) {
      var vs = [];
      unzipObjIntoU(o, 0, vs);
      return vs;
    } else {
      var xs = Object.keys(o),
          n = xs.length;
      for (var i = 0; i < n; ++i) {
        xs[i] = o[xs[i]];
      }return xs;
    }
  }
}

//

function assocPartialU(k, v, o) {
  var r = {};
  if (o instanceof Object) {
    if (!hasObjectConstructor(o)) o = Object.assign({}, o);
    for (var l in o) {
      if (l !== k) {
        r[l] = o[l];
      } else {
        r[k] = v;
        k = undefined;
      }
    }
  }
  if (isDefined(k)) r[k] = v;
  return r;
}

function dissocPartialU(k, o) {
  var r = void 0;
  if (o instanceof Object) {
    if (!hasObjectConstructor(o)) o = Object.assign({}, o);
    for (var l in o) {
      if (l !== k) {
        if (!r) r = {};
        r[l] = o[l];
      } else {
        k = undefined;
      }
    }
  }
  return r;
}

//

function inherit(Derived, Base, fns) {
  var F = function F() {};
  F.prototype = Base.prototype;
  var p = Derived.prototype = new F();
  p.constructor = Derived;
  for (var k in fns) {
    p[k] = fns[k];
  }
}

},{}]},{},[1])(1)
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,

(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.I = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.pipe2U = pipe2U;
exports.seq = seq;
exports.seqPartial = seqPartial;
exports.whereEqU = whereEqU;
exports.hasKeysOfU = hasKeysOfU;
exports.acyclicEqualsU = acyclicEqualsU;
exports.unzipObjIntoU = unzipObjIntoU;
exports.keys = keys;
exports.values = values;
exports.assocPartialU = assocPartialU;
exports.dissocPartialU = dissocPartialU;
exports.inherit = inherit;
var ary1of2 = function ary1of2(fn) {
  return function (x0, x1) {
    switch (arguments.length) {
      case 0:
      case 1:
        return fn(x0);
      default:
        return fn(x0)(x1);
    }
  };
};

var ary2of2 = function ary2of2(fn) {
  return function (x0, x1) {
    switch (arguments.length) {
      case 0:
      case 1:
        return function (x1) {
          return fn(x0, x1);
        };
      default:
        return fn(x0, x1);
    }
  };
};

var ary1of3 = function ary1of3(fn) {
  return function (x0, x1, x2) {
    switch (arguments.length) {
      case 0:
      case 1:
        return curryN(2, fn(x0));
      case 2:
        return curryN(2, fn(x0))(x1);
      default:
        return curryN(2, fn(x0))(x1, x2);
    }
  };
};

var ary2of3 = function ary2of3(fn) {
  return function (x0, x1, x2) {
    switch (arguments.length) {
      case 0:
      case 1:
        return ary1of2(function (x1) {
          return fn(x0, x1);
        });
      case 2:
        return fn(x0, x1);
      default:
        return fn(x0, x1)(x2);
    }
  };
};

var ary3of3 = function ary3of3(fn) {
  return function (x0, x1, x2) {
    switch (arguments.length) {
      case 0:
      case 1:
        return ary2of2(function (x1, x2) {
          return fn(x0, x1, x2);
        });
      case 2:
        return function (x2) {
          return fn(x0, x1, x2);
        };
      default:
        return fn(x0, x1, x2);
    }
  };
};

var ary1of4 = function ary1of4(fn) {
  return function (x0, x1, x2, x3) {
    switch (arguments.length) {
      case 0:
      case 1:
        return curryN(3, fn(x0));
      case 2:
        return curryN(3, fn(x0))(x1);
      case 3:
        return curryN(3, fn(x0))(x1, x2);
      default:
        return curryN(3, fn(x0))(x1, x2, x3);
    }
  };
};

var ary2of4 = function ary2of4(fn) {
  return function (x0, x1, x2, x3) {
    switch (arguments.length) {
      case 0:
      case 1:
        return ary1of3(function (x1) {
          return fn(x0, x1);
        });
      case 2:
        return curryN(2, fn(x0, x1));
      case 3:
        return curryN(2, fn(x0, x1))(x2);
      default:
        return curryN(2, fn(x0, x1))(x2, x3);
    }
  };
};

var ary3of4 = function ary3of4(fn) {
  return function (x0, x1, x2, x3) {
    switch (arguments.length) {
      case 0:
      case 1:
        return ary2of3(function (x1, x2) {
          return fn(x0, x1, x2);
        });
      case 2:
        return ary1of2(function (x2) {
          return fn(x0, x1, x2);
        });
      case 3:
        return fn(x0, x1, x2);
      default:
        return fn(x0, x1, x2)(x3);
    }
  };
};

var ary4of4 = function ary4of4(fn) {
  return function (x0, x1, x2, x3) {
    switch (arguments.length) {
      case 0:
      case 1:
        return ary3of3(function (x1, x2, x3) {
          return fn(x0, x1, x2, x3);
        });
      case 2:
        return ary2of2(function (x2, x3) {
          return fn(x0, x1, x2, x3);
        });
      case 3:
        return function (x3) {
          return fn(x0, x1, x2, x3);
        };
      default:
        return fn(x0, x1, x2, x3);
    }
  };
};

var ary0of0 = function ary0of0(fn) {
  return fn.length === 0 ? fn : function () {
    return fn();
  };
};
var ary1of1 = function ary1of1(fn) {
  return fn.length === 1 ? fn : function (x) {
    return fn(x);
  };
};

var C = [[ary0of0], [ary1of1, ary1of1], [void 0, ary1of2, ary2of2], [void 0, ary1of3, ary2of3, ary3of3], [void 0, ary1of4, ary2of4, ary3of4, ary4of4]];

var curryN = exports.curryN = function curryN(n, f) {
  return C[n][Math.min(n, f.length)](f);
};
var arityN = exports.arityN = function arityN(n, f) {
  return C[n][n](f);
};
var curry = exports.curry = function curry(f) {
  return arityN(f.length, f);
};

//

var id = exports.id = function id(x) {
  return x;
};
var always = exports.always = function always(x) {
  return function (_) {
    return x;
  };
};
var applyU = exports.applyU = function applyU(x2y, x) {
  return x2y(x);
};
var sndU = exports.sndU = function sndU(_, y) {
  return y;
};

//

var array0 = exports.array0 = Object.freeze([]);
var object0 = exports.object0 = Object.freeze({});

//

var isDefined = exports.isDefined = function isDefined(x) {
  return x !== undefined;
};

//

var hasU = exports.hasU = function hasU(p, x) {
  return Object.prototype.hasOwnProperty.call(x, p);
};

//

var constructorOf = exports.constructorOf = function constructorOf(x) {
  return x === undefined || x === null ? x : hasU("constructor", x) ? Object.getPrototypeOf(x).constructor : x.constructor;
};

//

var isFunction = exports.isFunction = function isFunction(x) {
  return typeof x === "function";
};
var isString = exports.isString = function isString(x) {
  return typeof x === "string";
};
var isNumber = exports.isNumber = function isNumber(x) {
  return typeof x === "number";
};

var isArray = exports.isArray = Array.isArray;

var isObject = exports.isObject = function isObject(x) {
  return x ? Object === constructorOf(x) : false;
};

//

function pipe2U(fn1, fn2) {
  var n = fn1.length;
  return n === 1 ? function (x) {
    return fn2(fn1(x));
  } : arityN(n, function () {
    return fn2(fn1.apply(undefined, arguments));
  });
}

var compose2U = exports.compose2U = function compose2U(fn1, fn2) {
  return pipe2U(fn2, fn1);
};

//

function seq(x) {
  for (var _len = arguments.length, fns = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    fns[_key - 1] = arguments[_key];
  }

  for (var i = 0, n = fns.length; i < n; ++i) {
    x = fns[i](x);
  }return x;
}

function seqPartial(x) {
  for (var _len2 = arguments.length, fns = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
    fns[_key2 - 1] = arguments[_key2];
  }

  for (var i = 0, n = fns.length; isDefined(x) && i < n; ++i) {
    x = fns[i](x);
  }return x;
}

//

var identicalU = exports.identicalU = function identicalU(a, b) {
  return a === b && (a !== 0 || 1 / a === 1 / b) || a !== a && b !== b;
};

//

function whereEqU(t, o) {
  for (var k in t) {
    var bk = o[k];
    if (!isDefined(bk) && !hasU(k, o) || !acyclicEqualsU(t[k], bk)) return false;
  }
  return true;
}

//

function hasKeysOfU(t, o) {
  for (var k in t) {
    if (!hasU(k, o)) return false;
  }return true;
}

//

var acyclicEqualsObject = exports.acyclicEqualsObject = function acyclicEqualsObject(a, b) {
  return whereEqU(a, b) && hasKeysOfU(b, a);
};

function acyclicEqualsArray(a, b) {
  var n = a.length;
  if (n !== b.length) return false;
  for (var i = 0; i < n; ++i) {
    if (!acyclicEqualsU(a[i], b[i])) return false;
  }return true;
}

function acyclicEqualsU(a, b) {
  if (identicalU(a, b)) return true;
  if (!a || !b) return false;
  var c = constructorOf(a);
  if (c !== constructorOf(b)) return false;
  switch (c) {
    case Array:
      return acyclicEqualsArray(a, b);
    case Object:
      return acyclicEqualsObject(a, b);
    default:
      return isFunction(a.equals) && a.equals(b);
  }
}

//

function unzipObjIntoU(o, ks, vs) {
  for (var k in o) {
    if (ks) ks.push(k);
    if (vs) vs.push(o[k]);
  }
}

function keys(o) {
  if (o instanceof Object) {
    if (Object === constructorOf(o)) {
      var ks = [];
      unzipObjIntoU(o, ks, 0);
      return ks;
    } else {
      return Object.keys(o);
    }
  }
}

function values(o) {
  if (o instanceof Object) {
    if (Object === constructorOf(o)) {
      var vs = [];
      unzipObjIntoU(o, 0, vs);
      return vs;
    } else {
      var xs = Object.keys(o),
          n = xs.length;
      for (var i = 0; i < n; ++i) {
        xs[i] = o[xs[i]];
      }return xs;
    }
  }
}

//

function assocPartialU(k, v, o) {
  var r = {};
  if (o instanceof Object) {
    if (Object !== constructorOf(o)) o = Object.assign({}, o);
    for (var l in o) {
      if (l !== k) {
        r[l] = o[l];
      } else {
        r[k] = v;
        k = undefined;
      }
    }
  }
  if (isDefined(k)) r[k] = v;
  return r;
}

function dissocPartialU(k, o) {
  var r = void 0;
  if (o instanceof Object) {
    if (Object !== constructorOf(o)) o = Object.assign({}, o);
    for (var l in o) {
      if (l !== k) {
        if (!r) r = {};
        r[l] = o[l];
      } else {
        k = undefined;
      }
    }
  }
  return r;
}

//

function inherit(Derived, Base, fns) {
  var p = Derived.prototype = Object.create(Base.prototype);
  p.constructor = Derived;
  for (var k in fns) {
    p[k] = fns[k];
  }
}

},{}]},{},[1])(1)
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJzcmMvaW5mZXN0aW5lcy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7O1FDeUlnQixNLEdBQUEsTTtRQVdBLEcsR0FBQSxHO1FBTUEsVSxHQUFBLFU7UUFhQSxRLEdBQUEsUTtRQVdBLFUsR0FBQSxVO1FBcUJBLGMsR0FBQSxjO1FBaUJBLGEsR0FBQSxhO1FBT0EsSSxHQUFBLEk7UUFZQSxNLEdBQUEsTTtRQWlCQSxhLEdBQUEsYTtRQW1CQSxjLEdBQUEsYztRQW9CQSxPLEdBQUEsTztBQW5TaEIsSUFBTSxVQUFVLFNBQVYsT0FBVTtBQUFBLFNBQU0sVUFBVSxFQUFWLEVBQWMsRUFBZCxFQUFrQjtBQUN0QyxZQUFRLFVBQVUsTUFBbEI7QUFDRSxXQUFLLENBQUw7QUFDQSxXQUFLLENBQUw7QUFBUSxlQUFPLEdBQUcsRUFBSCxDQUFQO0FBQ1I7QUFBUyxlQUFPLEdBQUcsRUFBSCxFQUFPLEVBQVAsQ0FBUDtBQUhYO0FBS0QsR0FOZTtBQUFBLENBQWhCOztBQVFBLElBQU0sVUFBVSxTQUFWLE9BQVU7QUFBQSxTQUFNLFVBQVUsRUFBVixFQUFjLEVBQWQsRUFBa0I7QUFDdEMsWUFBUSxVQUFVLE1BQWxCO0FBQ0UsV0FBSyxDQUFMO0FBQ0EsV0FBSyxDQUFMO0FBQVEsZUFBTztBQUFBLGlCQUFNLEdBQUcsRUFBSCxFQUFPLEVBQVAsQ0FBTjtBQUFBLFNBQVA7QUFDUjtBQUFTLGVBQU8sR0FBRyxFQUFILEVBQU8sRUFBUCxDQUFQO0FBSFg7QUFLRCxHQU5lO0FBQUEsQ0FBaEI7O0FBUUEsSUFBTSxVQUFVLFNBQVYsT0FBVTtBQUFBLFNBQU0sVUFBVSxFQUFWLEVBQWMsRUFBZCxFQUFrQixFQUFsQixFQUFzQjtBQUMxQyxZQUFRLFVBQVUsTUFBbEI7QUFDRSxXQUFLLENBQUw7QUFDQSxXQUFLLENBQUw7QUFBUSxlQUFPLE9BQU8sQ0FBUCxFQUFVLEdBQUcsRUFBSCxDQUFW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O0FBQ0YsU0FBTyxDQUFQO0FBQ0Q7O0FBRU0sU0FBUyxjQUFULENBQXdCLENBQXhCLEVBQTJCLENBQTNCLEVBQThCO0FBQ25DLE1BQUksVUFBSjtBQUNBLE1BQUksYUFBYSxNQUFqQixFQUF5QjtBQUN2QixRQUFJLFdBQVcsY0FBYyxDQUFkLENBQWYsRUFDRSxJQUFJLE9BQU8sTUFBUCxDQUFjLEVBQWQsRUFBa0IsQ0FBbEIsQ0FBSjtBQUNGLFNBQUssSUFBTSxDQUFYLElBQWdCLENBQWhCLEVBQW1CO0FBQ2pCLFVBQUksTUFBTSxDQUFWLEVBQWE7QUFDWCxZQUFJLENBQUMsQ0FBTCxFQUNFLElBQUksRUFBSjtBQUNGLFVBQUUsQ0FBRixJQUFPLEVBQUUsQ0FBRixDQUFQO0FBQ0QsT0FKRCxNQUlPO0FBQ0wsWUFBSSxTQUFKO0FBQ0Q7QUFDRjtBQUNGO0FBQ0QsU0FBTyxDQUFQO0FBQ0Q7O0FBRUQ7O0FBRU8sU0FBUyxPQUFULENBQWlCLE9BQWpCLEVBQTBCLElBQTFCLEVBQWdDLEdBQWhDLEVBQXFDO0FBQzFDLE1BQU0sSUFBSSxRQUFRLFNBQVIsR0FBb0IsT0FBTyxNQUFQLENBQWMsS0FBSyxTQUFuQixDQUE5QjtBQUNBLElBQUUsV0FBRixHQUFnQixPQUFoQjtBQUNBLE9BQUssSUFBTSxDQUFYLElBQWdCLEdBQWhCO0FBQ0UsTUFBRSxDQUFGLElBQU8sSUFBSSxDQUFKLENBQVA7QUFERjtBQUVEIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gZSh0LG4scil7ZnVuY3Rpb24gcyhvLHUpe2lmKCFuW29dKXtpZighdFtvXSl7dmFyIGE9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtpZighdSYmYSlyZXR1cm4gYShvLCEwKTtpZihpKXJldHVybiBpKG8sITApO3ZhciBmPW5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIrbytcIidcIik7dGhyb3cgZi5jb2RlPVwiTU9EVUxFX05PVF9GT1VORFwiLGZ9dmFyIGw9bltvXT17ZXhwb3J0czp7fX07dFtvXVswXS5jYWxsKGwuZXhwb3J0cyxmdW5jdGlvbihlKXt2YXIgbj10W29dWzFdW2VdO3JldHVybiBzKG4/bjplKX0sbCxsLmV4cG9ydHMsZSx0LG4scil9cmV0dXJuIG5bb10uZXhwb3J0c312YXIgaT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2Zvcih2YXIgbz0wO288ci5sZW5ndGg7bysrKXMocltvXSk7cmV0dXJuIHN9KSIsImNvbnN0IGFyeTFvZjIgPSBmbiA9PiBmdW5jdGlvbiAoeDAsIHgxKSB7XG4gIHN3aXRjaCAoYXJndW1lbnRzLmxlbmd0aCkge1xuICAgIGNhc2UgMDpcbiAgICBjYXNlIDE6IHJldHVybiBmbih4MClcbiAgICBkZWZhdWx0OiByZXR1cm4gZm4oeDApKHgxKVxuICB9XG59XG5cbmNvbnN0IGFyeTJvZjIgPSBmbiA9PiBmdW5jdGlvbiAoeDAsIHgxKSB7XG4gIHN3aXRjaCAoYXJndW1lbnRzLmxlbmd0aCkge1xuICAgIGNhc2UgMDpcbiAgICBjYXNlIDE6IHJldHVybiB4MSA9PiBmbih4MCwgeDEpXG4gICAgZGVmYXVsdDogcmV0dXJuIGZuKHgwLCB4MSlcbiAgfVxufVxuXG5jb25zdCBhcnkxb2YzID0gZm4gPT4gZnVuY3Rpb24gKHgwLCB4MSwgeDIpIHtcbiAgc3dpdGNoIChhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgY2FzZSAwOlxuICAgIGNhc2UgMTogcmV0dXJuIGN1cnJ5TigyLCBmbih4MCkpXG4gICAgY2FzZSAyOiByZXR1cm4gY3VycnlOKDIsIGZuKHgwKSkoeDEpXG4gICAgZGVmYXVsdDogcmV0dXJuIGN1cnJ5TigyLCBmbih4MCkpKHgxLCB4MilcbiAgfVxufVxuXG5jb25zdCBhcnkyb2YzID0gZm4gPT4gZnVuY3Rpb24gKHgwLCB4MSwgeDIpIHtcbiAgc3dpdGNoIChhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgY2FzZSAwOlxuICAgIGNhc2UgMTogcmV0dXJuIGFyeTFvZjIoeDEgPT4gZm4oeDAsIHgxKSlcbiAgICBjYXNlIDI6IHJldHVybiBmbih4MCwgeDEpXG4gICAgZGVmYXVsdDogcmV0dXJuIGZuKHgwLCB4MSkoeDIpXG4gIH1cbn1cblxuY29uc3QgYXJ5M29mMyA9IGZuID0+IGZ1bmN0aW9uICh4MCwgeDEsIHgyKSB7XG4gIHN3aXRjaCAoYXJndW1lbnRzLmxlbmd0aCkge1xuICAgIGNhc2UgMDpcbiAgICBjYXNlIDE6IHJldHVybiBhcnkyb2YyKCh4MSwgeDIpID0+IGZuKHgwLCB4MSwgeDIpKVxuICAgIGNhc2UgMjogcmV0dXJuIHgyID0+IGZuKHgwLCB4MSwgeDIpXG4gICAgZGVmYXVsdDogcmV0dXJuIGZuKHgwLCB4MSwgeDIpXG4gIH1cbn1cblxuY29uc3QgYXJ5MW9mNCA9IGZuID0+IGZ1bmN0aW9uICh4MCwgeDEsIHgyLCB4Mykge1xuICBzd2l0Y2ggKGFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICBjYXNlIDA6XG4gICAgY2FzZSAxOiByZXR1cm4gY3VycnlOKDMsIGZuKHgwKSlcbiAgICBjYXNlIDI6IHJldHVybiBjdXJyeU4oMywgZm4oeDApKSh4MSlcbiAgICBjYXNlIDM6IHJldHVybiBjdXJyeU4oMywgZm4oeDApKSh4MSwgeDIpXG4gICAgZGVmYXVsdDogcmV0dXJuIGN1cnJ5TigzLCBmbih4MCkpKHgxLCB4MiwgeDMpXG4gIH1cbn1cblxuY29uc3QgYXJ5Mm9mNCA9IGZuID0+IGZ1bmN0aW9uICh4MCwgeDEsIHgyLCB4Mykge1xuICBzd2l0Y2ggKGFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICBjYXNlIDA6XG4gICAgY2FzZSAxOiByZXR1cm4gYXJ5MW9mMyh4MSA9PiBmbih4MCwgeDEpKVxuICAgIGNhc2UgMjogcmV0dXJuIGN1cnJ5TigyLCBmbih4MCwgeDEpKVxuICAgIGNhc2UgMzogcmV0dXJuIGN1cnJ5TigyLCBmbih4MCwgeDEpKSh4MilcbiAgICBkZWZhdWx0OiByZXR1cm4gY3VycnlOKDIsIGZuKHgwLCB4MSkpKHgyLCB4MylcbiAgfVxufVxuXG5jb25zdCBhcnkzb2Y0ID0gZm4gPT4gZnVuY3Rpb24gKHgwLCB4MSwgeDIsIHgzKSB7XG4gIHN3aXRjaCAoYXJndW1lbnRzLmxlbmd0aCkge1xuICAgIGNhc2UgMDpcbiAgICBjYXNlIDE6IHJldHVybiBhcnkyb2YzKCh4MSwgeDIpID0+IGZuKHgwLCB4MSwgeDIpKVxuICAgIGNhc2UgMjogcmV0dXJuIGFyeTFvZjIoeDIgPT4gZm4oeDAsIHgxLCB4MikpXG4gICAgY2FzZSAzOiByZXR1cm4gZm4oeDAsIHgxLCB4MilcbiAgICBkZWZhdWx0OiByZXR1cm4gZm4oeDAsIHgxLCB4MikoeDMpXG4gIH1cbn1cblxuY29uc3QgYXJ5NG9mNCA9IGZuID0+IGZ1bmN0aW9uICh4MCwgeDEsIHgyLCB4Mykge1xuICBzd2l0Y2ggKGFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICBjYXNlIDA6XG4gICAgY2FzZSAxOiByZXR1cm4gYXJ5M29mMygoeDEsIHgyLCB4MykgPT4gZm4oeDAsIHgxLCB4MiwgeDMpKVxuICAgIGNhc2UgMjogcmV0dXJuIGFyeTJvZjIoKHgyLCB4MykgPT4gZm4oeDAsIHgxLCB4MiwgeDMpKVxuICAgIGNhc2UgMzogcmV0dXJuIHgzID0+IGZuKHgwLCB4MSwgeDIsIHgzKVxuICAgIGRlZmF1bHQ6IHJldHVybiBmbih4MCwgeDEsIHgyLCB4MylcbiAgfVxufVxuXG5jb25zdCBhcnkwb2YwID0gZm4gPT4gZm4ubGVuZ3RoID09PSAwID8gZm4gOiAoKSA9PiBmbigpXG5jb25zdCBhcnkxb2YxID0gZm4gPT4gZm4ubGVuZ3RoID09PSAxID8gZm4gOiB4ICA9PiBmbih4KVxuXG5jb25zdCBDID0gW1thcnkwb2YwXSxcbiAgICAgICAgICAgW2FyeTFvZjEsIGFyeTFvZjFdLFxuICAgICAgICAgICBbIHZvaWQgMCwgYXJ5MW9mMiwgYXJ5Mm9mMl0sXG4gICAgICAgICAgIFsgdm9pZCAwLCBhcnkxb2YzLCBhcnkyb2YzLCBhcnkzb2YzXSxcbiAgICAgICAgICAgWyB2b2lkIDAsIGFyeTFvZjQsIGFyeTJvZjQsIGFyeTNvZjQsIGFyeTRvZjRdXVxuXG5leHBvcnQgY29uc3QgY3VycnlOID0gKG4sIGYpID0+IENbbl1bTWF0aC5taW4obiwgZi5sZW5ndGgpXShmKVxuZXhwb3J0IGNvbnN0IGFyaXR5TiA9IChuLCBmKSA9PiBDW25dW25dKGYpXG5leHBvcnQgY29uc3QgY3VycnkgPSBmID0+IGFyaXR5TihmLmxlbmd0aCwgZilcblxuLy9cblxuZXhwb3J0IGNvbnN0IGlkID0geCA9PiB4XG5leHBvcnQgY29uc3QgYWx3YXlzID0geCA9PiBfID0+IHhcbmV4cG9ydCBjb25zdCBhcHBseVUgPSAoeDJ5LCB4KSA9PiB4MnkoeClcbmV4cG9ydCBjb25zdCBzbmRVID0gKF8sIHkpID0+IHlcblxuLy9cblxuZXhwb3J0IGNvbnN0IGFycmF5MCA9IE9iamVjdC5mcmVlemUoW10pXG5leHBvcnQgY29uc3Qgb2JqZWN0MCA9IE9iamVjdC5mcmVlemUoe30pXG5cbi8vXG5cbmV4cG9ydCBjb25zdCBpc0RlZmluZWQgPSB4ID0+IHggIT09IHVuZGVmaW5lZFxuXG4vL1xuXG5leHBvcnQgY29uc3QgaGFzVSA9IChwLCB4KSA9PiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoeCwgcClcblxuLy9cblxuZXhwb3J0IGNvbnN0IGNvbnN0cnVjdG9yT2YgPSB4ID0+XG4gIHggPT09IHVuZGVmaW5lZCB8fCB4ID09PSBudWxsXG4gID8geFxuICA6IGhhc1UoXCJjb25zdHJ1Y3RvclwiLCB4KVxuICAgID8gT2JqZWN0LmdldFByb3RvdHlwZU9mKHgpLmNvbnN0cnVjdG9yXG4gICAgOiB4LmNvbnN0cnVjdG9yXG5cbi8vXG5cbmV4cG9ydCBjb25zdCBpc0Z1bmN0aW9uID0geCA9PiB0eXBlb2YgeCA9PT0gXCJmdW5jdGlvblwiXG5leHBvcnQgY29uc3QgaXNTdHJpbmcgPSB4ID0+IHR5cGVvZiB4ID09PSBcInN0cmluZ1wiXG5leHBvcnQgY29uc3QgaXNOdW1iZXIgPSB4ID0+IHR5cGVvZiB4ID09PSBcIm51bWJlclwiXG5cbmV4cG9ydCBjb25zdCBpc0FycmF5ID0gQXJyYXkuaXNBcnJheVxuXG5leHBvcnQgY29uc3QgaXNPYmplY3QgPSB4ID0+IHggPyBPYmplY3QgPT09IGNvbnN0cnVjdG9yT2YoeCkgOiBmYWxzZVxuXG4vL1xuXG5leHBvcnQgZnVuY3Rpb24gcGlwZTJVKGZuMSwgZm4yKSB7XG4gIGNvbnN0IG4gPSBmbjEubGVuZ3RoXG4gIHJldHVybiBuID09PSAxXG4gICAgPyB4ID0+IGZuMihmbjEoeCkpXG4gICAgOiBhcml0eU4obiwgKC4uLnhzKSA9PiBmbjIoZm4xKC4uLnhzKSkpXG59XG5cbmV4cG9ydCBjb25zdCBjb21wb3NlMlUgPSAoZm4xLCBmbjIpID0+IHBpcGUyVShmbjIsIGZuMSlcblxuLy9cblxuZXhwb3J0IGZ1bmN0aW9uIHNlcSh4LCAuLi5mbnMpIHtcbiAgZm9yIChsZXQgaT0wLCBuPWZucy5sZW5ndGg7IGk8bjsgKytpKVxuICAgIHggPSBmbnNbaV0oeClcbiAgcmV0dXJuIHhcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNlcVBhcnRpYWwoeCwgLi4uZm5zKSB7XG4gIGZvciAobGV0IGk9MCwgbj1mbnMubGVuZ3RoOyBpc0RlZmluZWQoeCkgJiYgaTxuOyArK2kpXG4gICAgeCA9IGZuc1tpXSh4KVxuICByZXR1cm4geFxufVxuXG4vL1xuXG5leHBvcnQgY29uc3QgaWRlbnRpY2FsVSA9IChhLCBiKSA9PlxuICBhID09PSBiICYmIChhICE9PSAwIHx8IDEgLyBhID09PSAxIC8gYikgfHwgYSAhPT0gYSAmJiBiICE9PSBiXG5cbi8vXG5cbmV4cG9ydCBmdW5jdGlvbiB3aGVyZUVxVSh0LCBvKSB7XG4gIGZvciAoY29uc3QgayBpbiB0KSB7XG4gICAgY29uc3QgYmsgPSBvW2tdXG4gICAgaWYgKCFpc0RlZmluZWQoYmspICYmICFoYXNVKGssIG8pIHx8ICFhY3ljbGljRXF1YWxzVSh0W2tdLCBiaykpXG4gICAgICByZXR1cm4gZmFsc2VcbiAgfVxuICByZXR1cm4gdHJ1ZVxufVxuXG4vL1xuXG5leHBvcnQgZnVuY3Rpb24gaGFzS2V5c09mVSh0LCBvKSB7XG4gIGZvciAoY29uc3QgayBpbiB0KVxuICAgIGlmICghaGFzVShrLCBvKSlcbiAgICAgIHJldHVybiBmYWxzZVxuICByZXR1cm4gdHJ1ZVxufVxuXG4vL1xuXG5leHBvcnQgY29uc3QgYWN5Y2xpY0VxdWFsc09iamVjdCA9IChhLCBiKSA9PiB3aGVyZUVxVShhLCBiKSAmJiBoYXNLZXlzT2ZVKGIsIGEpXG5cbmZ1bmN0aW9uIGFjeWNsaWNFcXVhbHNBcnJheShhLCBiKSB7XG4gIGNvbnN0IG4gPSBhLmxlbmd0aFxuICBpZiAobiAhPT0gYi5sZW5ndGgpXG4gICAgcmV0dXJuIGZhbHNlXG4gIGZvciAobGV0IGk9MDsgaTxuOyArK2kpXG4gICAgaWYgKCFhY3ljbGljRXF1YWxzVShhW2ldLCBiW2ldKSlcbiAgICAgIHJldHVybiBmYWxzZVxuICByZXR1cm4gdHJ1ZVxufVxuXG5leHBvcnQgZnVuY3Rpb24gYWN5Y2xpY0VxdWFsc1UoYSwgYikge1xuICBpZiAoaWRlbnRpY2FsVShhLCBiKSlcbiAgICByZXR1cm4gdHJ1ZVxuICBpZiAoIWEgfHwgIWIpXG4gICAgcmV0dXJuIGZhbHNlXG4gIGNvbnN0IGMgPSBjb25zdHJ1Y3Rvck9mKGEpXG4gIGlmIChjICE9PSBjb25zdHJ1Y3Rvck9mKGIpKVxuICAgIHJldHVybiBmYWxzZVxuICBzd2l0Y2ggKGMpIHtcbiAgICBjYXNlIEFycmF5OiByZXR1cm4gYWN5Y2xpY0VxdWFsc0FycmF5KGEsIGIpXG4gICAgY2FzZSBPYmplY3Q6IHJldHVybiBhY3ljbGljRXF1YWxzT2JqZWN0KGEsIGIpXG4gICAgZGVmYXVsdDogcmV0dXJuIGlzRnVuY3Rpb24oYS5lcXVhbHMpICYmIGEuZXF1YWxzKGIpXG4gIH1cbn1cblxuLy9cblxuZXhwb3J0IGZ1bmN0aW9uIHVuemlwT2JqSW50b1Uobywga3MsIHZzKSB7XG4gIGZvciAoY29uc3QgayBpbiBvKSB7XG4gICAgaWYgKGtzKSBrcy5wdXNoKGspXG4gICAgaWYgKHZzKSB2cy5wdXNoKG9ba10pXG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGtleXMobykge1xuICBpZiAobyBpbnN0YW5jZW9mIE9iamVjdCkge1xuICAgIGlmIChPYmplY3QgPT09IGNvbnN0cnVjdG9yT2YobykpIHtcbiAgICAgIGNvbnN0IGtzPVtdXG4gICAgICB1bnppcE9iakludG9VKG8sIGtzLCAwKVxuICAgICAgcmV0dXJuIGtzXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBPYmplY3Qua2V5cyhvKVxuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gdmFsdWVzKG8pIHtcbiAgaWYgKG8gaW5zdGFuY2VvZiBPYmplY3QpIHtcbiAgICBpZiAoT2JqZWN0ID09PSBjb25zdHJ1Y3Rvck9mKG8pKSB7XG4gICAgICBjb25zdCB2cz1bXVxuICAgICAgdW56aXBPYmpJbnRvVShvLCAwLCB2cylcbiAgICAgIHJldHVybiB2c1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCB4cyA9IE9iamVjdC5rZXlzKG8pLCBuID0geHMubGVuZ3RoXG4gICAgICBmb3IgKGxldCBpPTA7IGk8bjsgKytpKVxuICAgICAgICB4c1tpXSA9IG9beHNbaV1dXG4gICAgICByZXR1cm4geHNcbiAgICB9XG4gIH1cbn1cblxuLy9cblxuZXhwb3J0IGZ1bmN0aW9uIGFzc29jUGFydGlhbFUoaywgdiwgbykge1xuICBjb25zdCByID0ge31cbiAgaWYgKG8gaW5zdGFuY2VvZiBPYmplY3QpIHtcbiAgICBpZiAoT2JqZWN0ICE9PSBjb25zdHJ1Y3Rvck9mKG8pKVxuICAgICAgbyA9IE9iamVjdC5hc3NpZ24oe30sIG8pXG4gICAgZm9yIChjb25zdCBsIGluIG8pIHtcbiAgICAgIGlmIChsICE9PSBrKSB7XG4gICAgICAgIHJbbF0gPSBvW2xdXG4gICAgICB9IGVsc2Uge1xuICAgICAgICByW2tdID0gdlxuICAgICAgICBrID0gdW5kZWZpbmVkXG4gICAgICB9XG4gICAgfVxuICB9XG4gIGlmIChpc0RlZmluZWQoaykpXG4gICAgcltrXSA9IHZcbiAgcmV0dXJuIHJcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRpc3NvY1BhcnRpYWxVKGssIG8pIHtcbiAgbGV0IHJcbiAgaWYgKG8gaW5zdGFuY2VvZiBPYmplY3QpIHtcbiAgICBpZiAoT2JqZWN0ICE9PSBjb25zdHJ1Y3Rvck9mKG8pKVxuICAgICAgbyA9IE9iamVjdC5hc3NpZ24oe30sIG8pXG4gICAgZm9yIChjb25zdCBsIGluIG8pIHtcbiAgICAgIGlmIChsICE9PSBrKSB7XG4gICAgICAgIGlmICghcilcbiAgICAgICAgICByID0ge31cbiAgICAgICAgcltsXSA9IG9bbF1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGsgPSB1bmRlZmluZWRcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJcbn1cblxuLy9cblxuZXhwb3J0IGZ1bmN0aW9uIGluaGVyaXQoRGVyaXZlZCwgQmFzZSwgZm5zKSB7XG4gIGNvbnN0IHAgPSBEZXJpdmVkLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoQmFzZS5wcm90b3R5cGUpXG4gIHAuY29uc3RydWN0b3IgPSBEZXJpdmVkXG4gIGZvciAoY29uc3QgayBpbiBmbnMpXG4gICAgcFtrXSA9IGZuc1trXVxufVxuIl19

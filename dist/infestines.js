(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.partialLenses = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.curryN = curryN;
exports.isObject = isObject;
exports.pipe = pipe;
exports.seq = seq;
exports.seqPartial = seqPartial;
exports.whereEqU = whereEqU;
exports.hasKeysOfU = hasKeysOfU;
exports.acyclicEqualsU = acyclicEqualsU;
exports.unzipObjIntoU = unzipObjIntoU;
exports.keys = keys;
exports.values = values;
exports.unzipObj = unzipObj;
exports.zipObjPartialU = zipObjPartialU;
exports.assocPartialU = assocPartialU;
exports.dissocPartialU = dissocPartialU;
exports.mapPartialU = mapPartialU;
var curry2 = exports.curry2 = function curry2(fn) {
  return function (x1, x2) {
    switch (arguments.length) {
      case 1:
        return function (x2) {
          return fn(x1, x2);
        };
      default:
        return fn(x1, x2);
    }
  };
};

var curry3 = exports.curry3 = function curry3(fn) {
  return function (x1, x2, x3) {
    switch (arguments.length) {
      case 1:
        return curry2(function (x2, x3) {
          return fn(x1, x2, x3);
        });
      case 2:
        return function (x3) {
          return fn(x1, x2, x3);
        };
      default:
        return fn(x1, x2, x3);
    }
  };
};

var curry4 = exports.curry4 = function curry4(fn) {
  return function (x1, x2, x3, x4) {
    switch (arguments.length) {
      case 1:
        return curry3(function (x2, x3, x4) {
          return fn(x1, x2, x3, x4);
        });
      case 2:
        return curry2(function (x3, x4) {
          return fn(x1, x2, x3, x4);
        });
      case 3:
        return function (x4) {
          return fn(x1, x2, x3, x4);
        };
      default:
        return fn(x1, x2, x3, x4);
    }
  };
};

function curryN(n, fn) {
  switch (n) {
    case 0:
      return function () {
        return fn();
      };
    case 1:
      return function (x1) {
        return fn(x1);
      };
    case 2:
      return curry2(fn);
    case 3:
      return curry3(fn);
    case 4:
      return curry4(fn);
    default:
      throw new Error("curryN(" + n + ", ...) unsupported");
  }
}

var curry = exports.curry = function curry(fn) {
  return curryN(fn.length, fn);
};

//

var id = exports.id = function id(x) {
  return x;
};
var always = exports.always = function always(x) {
  return function (_) {
    return x;
  };
};

//

var isDefined = exports.isDefined = function isDefined(x) {
  return x !== undefined;
};

//

// The idea here is that any valid JSON object will be categorized correctly.
// Cases where there is no explicit attempt to create Array/Object lookalikes
// will also categorize correctly.

var isArray = exports.isArray = function isArray(x) {
  return x ? x.constructor === Array : false;
};

function isObject(x) {
  if (!x) return false;
  var c = x.constructor;
  return c === Object || typeof c !== "function" && Object.getPrototypeOf(x).constructor === Object;
}

//

var pipe2 = exports.pipe2 = function pipe2(fn1, fn2) {
  return curryN(fn1.length, function () {
    return fn2(fn1.apply(undefined, arguments));
  });
};

var pipe3 = exports.pipe3 = function pipe3(fn1, fn2, fn3) {
  return curryN(fn1.length, function () {
    return fn3(fn2(fn1.apply(undefined, arguments)));
  });
};

var pipe4 = exports.pipe4 = function pipe4(fn1, fn2, fn3, fn4) {
  return curryN(fn1.length, function () {
    return fn4(fn3(fn2(fn1.apply(undefined, arguments))));
  });
};

function pipe() {
  switch (arguments.length) {
    case 0:
      return id;
    case 1:
      return arguments[0];
    case 2:
      return pipe2.apply(this, arguments);
    case 3:
      return pipe3.apply(this, arguments);
    case 4:
      return pipe4.apply(this, arguments);
    default:
      throw new Error("pipe with " + arguments.length + " fns unsupported");
  }
}

//

function seq(x) {
  var r = x;

  for (var _len = arguments.length, fns = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    fns[_key - 1] = arguments[_key];
  }

  for (var i = 0, n = fns.length; i < n; ++i) {
    r = fns[i](r);
  }return r;
}

function seqPartial(x) {
  var r = x;

  for (var _len2 = arguments.length, fns = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
    fns[_key2 - 1] = arguments[_key2];
  }

  for (var i = 0, n = fns.length; isDefined(r) && i < n; ++i) {
    r = fns[i](r);
  }return r;
}

//

var identicalU = exports.identicalU = function identicalU(a, b) {
  return a === b && (a !== 0 || 1 / a === 1 / b) || a !== a && b !== b;
};

//

function whereEqU(t, o) {
  for (var k in t) {
    var bk = o[k];
    if (!isDefined(bk) && !(k in o) || !acyclicEqualsU(t[k], bk)) return false;
  }
  return true;
}

//

function hasKeysOfU(t, o) {
  for (var k in t) {
    if (!(k in o)) return false;
  }return true;
}

//

var acyclicEqualsObject = exports.acyclicEqualsObject = function acyclicEqualsObject(a, b) {
  return whereEqU(a, b) && hasKeysOfU(b, a);
};

function acyclicEqualsArray(a, b) {
  var n = a.length;
  if (n !== b.length) return false;
  for (var i = 0; i < n; ++i) {
    if (!acyclicEqualsU(a[i], b[i])) return false;
  }return true;
}

function acyclicEqualsU(a, b) {
  if (identicalU(a, b)) return true;
  if (!a || !b) return false;
  var c = a.constructor;
  if (c !== b.constructor) return false;
  switch (c) {
    case Array:
      return acyclicEqualsArray(a, b);
    case Object:
      return acyclicEqualsObject(a, b);
    default:
      if (typeof a.equals === "function") return a.equals(b);
      return false;
  }
}

//

function unzipObjIntoU(o, ks, vs) {
  for (var k in o) {
    if (ks) ks.push(k);
    if (vs) vs.push(o[k]);
  }
}

function keys(o) {
  var ks = [];unzipObjIntoU(o, ks, null);return ks;
}
function values(o) {
  var vs = [];unzipObjIntoU(o, null, vs);return vs;
}

function unzipObj(o) {
  var ks = [],
      vs = [];
  unzipObjIntoU(o, ks, vs);
  return [ks, vs];
}

function zipObjPartialU(ks, vs) {
  var o = {},
      n = Math.min(ks.length, vs.length);
  for (var i = 0; i < n; ++i) {
    var v = vs[i];
    if (isDefined(v)) o[ks[i]] = v;
  }
  return o;
}

function assocPartialU(k, v, o) {
  var r = {};
  if (isObject(o)) for (var l in o) {
    if (l !== k) r[l] = o[l];else {
      r[k] = v;
      k = undefined;
    }
  }if (isDefined(k)) r[k] = v;
  return r;
}

function dissocPartialU(k, o) {
  var r = void 0;
  if (isObject(o)) for (var l in o) {
    if (l !== k) {
      if (!r) r = {};
      r[l] = o[l];
    } else k = undefined;
  }return r;
}

//

function mapPartialU(x2y, xs) {
  var ys = [],
      n = xs.length;
  for (var i = 0; i < n; ++i) {
    var y = x2y(xs[i]);
    if (isDefined(y)) ys.push(y);
  }
  return ys;
}

},{}]},{},[1])(1)
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
